name: build

on:
  # pull_request:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-dev'


jobs:

  # test:
  #   runs-on: ubuntu-latest
  #   container: golang:1.18
  #   services:
  #     postgres:
  #       image: postgres
  #       env:
  #         POSTGRES_USER: gophkeeper
  #         POSTGRES_PASSWORD: gophkeeper
  #         POSTGRES_DB: gophkeeper
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 5s
  #         --health-timeout 5s
  #         --health-retries 5
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #     - name: go test
  #       run: |
  #         DSN_ADDRESS='postgre://gophkeeper:gophkeeper@postgres:5432/gophkeeper?sslmode=disable'
  #         go test -race -cover -coverprofile cover.out ./...
  #         go tool -func cover.out


  build:
    # needs: test
    runs-on: ubuntu-latest
    container: golang:1.18
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
      - name: Set tag
        id: tag
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: Build server binary
        run: |
          cd cmd/server
          mkdir release
          GOOS=windows GOARCH=386 go build -ldflags '-X main.buildVersion=${{ steps.tag.outputs.tag }} -X main.buildDate=${{ steps.date.outputs.date }} -X main.buildCommit=${{ github.sha }}' -o release/server.exe
          GOOS=windows GOARCH=amd64 go build -ldflags '-X main.buildVersion=${{ steps.tag.outputs.tag }} -X main.buildDate=${{ steps.date.outputs.date }} -X main.buildCommit=${{ github.sha }}' -o release/server64.exe

          GOOS=linux GOARCH=386 go build -ldflags '-X main.buildVersion=${{ steps.tag.outputs.tag }} -X main.buildDate=${{ steps.date.outputs.date }} -X main.buildCommit=${{ github.sha }}' -o release/server
          GOOS=linux GOARCH=amd64 go build -ldflags '-X main.buildVersion=${{ steps.tag.outputs.tag }} -X main.buildDate=${{ steps.date.outputs.date }} -X main.buildCommit=${{ github.sha }}' -o release/server64

          GOOS=darwin GOARCH=amd64 go build -ldflags '-X main.buildVersion=${{ steps.tag.outputs.tag }} -X main.buildDate=${{ steps.date.outputs.date }} -X main.buildCommit=${{ github.sha }}' -o release/server_darwin64

          cd ../client
          mkdir release
          GOOS=windows GOARCH=386 go build -ldflags '-X main.buildVersion=${{ steps.tag.outputs.tag }} -X main.buildDate=${{ steps.date.outputs.date }} -X main.buildCommit=${{ github.sha }}' -o release/client.exe
          GOOS=windows GOARCH=amd64 go build -ldflags '-X main.buildVersion=${{ steps.tag.outputs.tag }} -X main.buildDate=${{ steps.date.outputs.date }} -X main.buildCommit=${{ github.sha }}' -o release/client64.exe

          GOOS=linux GOARCH=386 go build -ldflags '-X main.buildVersion=${{ steps.tag.outputs.tag }} -X main.buildDate=${{ steps.date.outputs.date }} -X main.buildCommit=${{ github.sha }}' -o release/client
          GOOS=linux GOARCH=amd64 go build -ldflags '-X main.buildVersion=${{ steps.tag.outputs.tag }} -X main.buildDate=${{ steps.date.outputs.date }} -X main.buildCommit=${{ github.sha }}' -o release/client64

          GOOS=darwin GOARCH=amd64 go build -ldflags '-X main.buildVersion=${{ steps.tag.outputs.tag }} -X main.buildDate=${{ steps.date.outputs.date }} -X main.buildCommit=${{ github.sha }}' -o release/client_darwin64
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release
          path: |
            cmd/server/release
            cmd/client/release
 