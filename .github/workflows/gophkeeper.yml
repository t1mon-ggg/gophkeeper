name: build

on:
  # pull_request:
  push:
    tags:
      - 'v*.*.*'


jobs:

  # test:
  #   runs-on: ubuntu-latest
  #   container: golang:1.18

  #   services:
  #     postgres:
  #       image: postgres
  #       env:
  #         POSTGRES_USER: gophkeeper
  #         POSTGRES_PASSWORD: gophkeeper
  #         POSTGRES_DB: gophkeeper
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 5s
  #         --health-timeout 5s
  #         --health-retries 5
  #   steps:
  #     - name: go test
  #       run: |


  build:
    runs-on: ubuntu-latest
    container: golang:1.18
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set environment variables
        run: |
          echo "GIT_SHA=${GITHUB_SHA}" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "BUILD_TIME=$(date +"%Y/%m/%d %H:%M:%S")" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Build server binary
        run: |
          cd cmd/server
          mkdir release
          GOOS=windows GOARCH=386 go build -ldflags '-X main.buildVersion=${{ RELEASE_VERSION }} -X main.buildDate=${{ BUILD_TIME }} -X main.buildCommit=${{ GIT_SHA }}' -o release/server.exe
          GOOS=windows GOARCH=amd64 go build -ldflags '-X main.buildVersion=${{ RELEASE_VERSION }} -X main.buildDate=${{ BUILD_TIME }} -X main.buildCommit=${{ GIT_SHA }}' -o release/server64.exe

          GOOS=linux GOARCH=386 go build -ldflags '-X main.buildVersion=${{ RELEASE_VERSION }} -X main.buildDate=${{ BUILD_TIME }} -X main.buildCommit=${{ GIT_SHA }}' -o release/server
          GOOS=linux GOARCH=amd64 go build -ldflags '-X main.buildVersion=${{ RELEASE_VERSION }} -X main.buildDate=${{ BUILD_TIME }} -X main.buildCommit=${{ GIT_SHA }}' -o release/server64

          GOOS=darwin GOARCH=amd64 go build -ldflags '-X main.buildVersion=${{ RELEASE_VERSION }} -X main.buildDate=${{ BUILD_TIME }} -X main.buildCommit=${{ GIT_SHA }}' -o release/server_darwin64

          cd ../client
          mkdir release
          GOOS=windows GOARCH=386 go build -ldflags '-X main.buildVersion=${{ RELEASE_VERSION }} -X main.buildDate=${{ BUILD_TIME }} -X main.buildCommit=${{ GIT_SHA }}' -o release/client.exe
          GOOS=windows GOARCH=amd64 go build -ldflags '-X main.buildVersion=${{ RELEASE_VERSION }} -X main.buildDate=${{ BUILD_TIME }} -X main.buildCommit=${{ GIT_SHA }}' -o release/client64.exe

          GOOS=linux GOARCH=386 go build -ldflags '-X main.buildVersion=${{ RELEASE_VERSION }} -X main.buildDate=${{ BUILD_TIME }} -X main.buildCommit=${{ GIT_SHA }}' -o release/client
          GOOS=linux GOARCH=amd64 go build -ldflags '-X main.buildVersion=${{ RELEASE_VERSION }} -X main.buildDate=${{ BUILD_TIME }} -X main.buildCommit=${{ GIT_SHA }}' -o release/client64

          GOOS=darwin GOARCH=amd64 go build -ldflags '-X main.buildVersion=${{ RELEASE_VERSION }} -X main.buildDate=${{ BUILD_TIME }} -X main.buildCommit=${{ GIT_SHA }}' -o release/client_darwin64
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release
          path: |
            cmd/server/release
            cmd/client/release
      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ github.ref }}
      #     release_name: Release ${{ github.ref }}
      #     draft: false
      #     prerelease: false
      # - name: Upload Release Asset
      #   id: upload-release-asset 
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
      #     asset_path: ./my-artifact.zip
      #     asset_name: my-artifact.zip
      #     asset_content_type: application/zip
      # - name: Build server binary
      #   run: |
      #     cd cmd/shortener
      #     go build -o shortener
 