name: build

on:
  pull_request:
  push:
    branches:
      - dev


jobs:

  # test:
  #   runs-on: ubuntu-latest
  #   container: golang:1.18

  #   services:
  #     postgres:
  #       image: postgres
  #       env:
  #         POSTGRES_USER: gophkeeper
  #         POSTGRES_PASSWORD: gophkeeper
  #         POSTGRES_DB: gophkeeper
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 5s
  #         --health-timeout 5s
  #         --health-retries 5
  #   steps:
  #     - name: go test
  #       run: |


  build:
    runs-on: ubuntu-latest
    container: golang:1.18
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set environment variables
        run: |
          echo "GIT_SHA=${GITHUB_SHA}" >> $GITHUB_ENV
          echo "GIT_BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
          echo "BUILD_TIME=${GITHUB_REF##*/}" >> $GITHUB_ENV
      - name: Use environment variables
        run: |
          echo "GIT_SHA=${GIT_SHA}"
          echo "GIT_BRANCH=${GIT_BRANCH}"
          echo "BUILD_TIME=${BUILD_TIME}"
          echo "test=$(export)"
      - name: Build server binary
        run: |
          tag=$(git tag)
          hash=$(git rev-parse --verify HEAD)
          ts=$(date +"%Y/%m/%d %H:%M:%S")
          cd cmd/server
          mkdir release
          GOOS=windows GOARCH=386 go build -ldflags '-X main.buildVersion=${tag} -X main.buildDate=${ts} -X main.buildCommit=${GIT_SHA}' -o release/server.exe
          GOOS=windows GOARCH=amd64 go build -ldflags '-X main.buildVersion=${tag} -X main.buildDate=${ts} -X main.buildCommit=${GIT_SHA}' -o release/server64.exe

          GOOS=linux GOARCH=386 go build -ldflags '-X main.buildVersion=${tag} -X main.buildDate=${ts} -X main.buildCommit=${GIT_SHA}' -o release/server
          GOOS=linux GOARCH=amd64 go build -ldflags '-X main.buildVersion=${tag} -X main.buildDate=${ts} -X main.buildCommit=${GIT_SHA}' -o release/server64

          GOOS=darwin GOARCH=amd64 go build -ldflags '-X main.buildVersion=${tag} -X main.buildDate=${ts} -X main.buildCommit=${GIT_SHA}' -o release/server_darwin64

          cd ../client
          mkdir release
          GOOS=windows GOARCH=386 go build -ldflags '-X main.buildVersion=${tag} -X main.buildDate=${ts} -X main.buildCommit=${GIT_SHA}' -o release/client.exe
          GOOS=windows GOARCH=amd64 go build -ldflags '-X main.buildVersion=${tag} -X main.buildDate=${ts} -X main.buildCommit=${GIT_SHA}' -o release/client64.exe

          GOOS=linux GOARCH=386 go build -ldflags '-X main.buildVersion=${tag} -X main.buildDate=${ts} -X main.buildCommit=${GIT_SHA}' -o release/client
          GOOS=linux GOARCH=amd64 go build -ldflags '-X main.buildVersion=${tag} -X main.buildDate=${ts} -X main.buildCommit=${GIT_SHA}' -o release/client64

          GOOS=darwin GOARCH=amd64 go build -ldflags '-X main.buildVersion=${tag} -X main.buildDate=${ts} -X main.buildCommit=${GIT_SHA}' -o release/client_darwin64
      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release
          path: |
            cmd/server/release
            cmd/client/release
      # - name: Build server binary
      #   run: |
      #     cd cmd/shortener
      #     go build -o shortener
 