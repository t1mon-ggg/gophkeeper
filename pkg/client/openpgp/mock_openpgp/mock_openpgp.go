// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/client/openpgp/openpgp.go

// Package mock_openpgp is a generated GoMock package.
package mock_openpgp

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOPENPGP is a mock of OPENPGP interface.
type MockOPENPGP struct {
	ctrl     *gomock.Controller
	recorder *MockOPENPGPMockRecorder
}

// MockOPENPGPMockRecorder is the mock recorder for MockOPENPGP.
type MockOPENPGPMockRecorder struct {
	mock *MockOPENPGP
}

// NewMockOPENPGP creates a new mock instance.
func NewMockOPENPGP(ctrl *gomock.Controller) *MockOPENPGP {
	mock := &MockOPENPGP{ctrl: ctrl}
	mock.recorder = &MockOPENPGPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOPENPGP) EXPECT() *MockOPENPGPMockRecorder {
	return m.recorder
}

// AddPrivateKey mocks base method.
func (m *MockOPENPGP) AddPrivateKey(armored []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPrivateKey", armored)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPrivateKey indicates an expected call of AddPrivateKey.
func (mr *MockOPENPGPMockRecorder) AddPrivateKey(armored interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPrivateKey", reflect.TypeOf((*MockOPENPGP)(nil).AddPrivateKey), armored)
}

// AddPublicKey mocks base method.
func (m *MockOPENPGP) AddPublicKey(armored []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPublicKey", armored)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPublicKey indicates an expected call of AddPublicKey.
func (mr *MockOPENPGPMockRecorder) AddPublicKey(armored interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPublicKey", reflect.TypeOf((*MockOPENPGP)(nil).AddPublicKey), armored)
}

// DecryptWithKeys mocks base method.
func (m *MockOPENPGP) DecryptWithKeys(data []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptWithKeys", data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptWithKeys indicates an expected call of DecryptWithKeys.
func (mr *MockOPENPGPMockRecorder) DecryptWithKeys(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptWithKeys", reflect.TypeOf((*MockOPENPGP)(nil).DecryptWithKeys), data)
}

// EncryptWithKeys mocks base method.
func (m *MockOPENPGP) EncryptWithKeys(data []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptWithKeys", data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptWithKeys indicates an expected call of EncryptWithKeys.
func (mr *MockOPENPGPMockRecorder) EncryptWithKeys(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptWithKeys", reflect.TypeOf((*MockOPENPGP)(nil).EncryptWithKeys), data)
}

// GeneratePair mocks base method.
func (m *MockOPENPGP) GeneratePair() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GeneratePair")
	ret0, _ := ret[0].(error)
	return ret0
}

// GeneratePair indicates an expected call of GeneratePair.
func (mr *MockOPENPGPMockRecorder) GeneratePair() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GeneratePair", reflect.TypeOf((*MockOPENPGP)(nil).GeneratePair))
}

// GetPublicKey mocks base method.
func (m *MockOPENPGP) GetPublicKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPublicKey indicates an expected call of GetPublicKey.
func (mr *MockOPENPGPMockRecorder) GetPublicKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockOPENPGP)(nil).GetPublicKey))
}

// ReadFolder mocks base method.
func (m *MockOPENPGP) ReadFolder(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFolder", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadFolder indicates an expected call of ReadFolder.
func (mr *MockOPENPGPMockRecorder) ReadFolder(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFolder", reflect.TypeOf((*MockOPENPGP)(nil).ReadFolder), name)
}

// ReloadPublicKeys mocks base method.
func (m *MockOPENPGP) ReloadPublicKeys(keys []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReloadPublicKeys", keys)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReloadPublicKeys indicates an expected call of ReloadPublicKeys.
func (mr *MockOPENPGPMockRecorder) ReloadPublicKeys(keys interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReloadPublicKeys", reflect.TypeOf((*MockOPENPGP)(nil).ReloadPublicKeys), keys)
}
