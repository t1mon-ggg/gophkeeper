// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/client/storage/interface.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/t1mon-ggg/gophkeeper/pkg/client/storage"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// DeleteSecret mocks base method.
func (m *MockStorage) DeleteSecret(name string) storage.Storage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", name)
	ret0, _ := ret[0].(storage.Storage)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockStorageMockRecorder) DeleteSecret(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockStorage)(nil).DeleteSecret), name)
}

// GetSecret mocks base method.
func (m *MockStorage) GetSecret(name string) storage.Secret {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", name)
	ret0, _ := ret[0].(storage.Secret)
	return ret0
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockStorageMockRecorder) GetSecret(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockStorage)(nil).GetSecret), name)
}

// HashSum mocks base method.
func (m *MockStorage) HashSum() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashSum")
	ret0, _ := ret[0].(string)
	return ret0
}

// HashSum indicates an expected call of HashSum.
func (mr *MockStorageMockRecorder) HashSum() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashSum", reflect.TypeOf((*MockStorage)(nil).HashSum))
}

// InsertSecret mocks base method.
func (m *MockStorage) InsertSecret(name, description string, secret storage.Secret) storage.Storage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSecret", name, description, secret)
	ret0, _ := ret[0].(storage.Storage)
	return ret0
}

// InsertSecret indicates an expected call of InsertSecret.
func (mr *MockStorageMockRecorder) InsertSecret(name, description, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSecret", reflect.TypeOf((*MockStorage)(nil).InsertSecret), name, description, secret)
}

// ListSecrets mocks base method.
func (m *MockStorage) ListSecrets() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecrets")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// ListSecrets indicates an expected call of ListSecrets.
func (mr *MockStorageMockRecorder) ListSecrets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecrets", reflect.TypeOf((*MockStorage)(nil).ListSecrets))
}

// Load mocks base method.
func (m *MockStorage) Load(b []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", b)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockStorageMockRecorder) Load(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockStorage)(nil).Load), b)
}

// ReEncrypt mocks base method.
func (m *MockStorage) ReEncrypt() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReEncrypt")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReEncrypt indicates an expected call of ReEncrypt.
func (mr *MockStorageMockRecorder) ReEncrypt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReEncrypt", reflect.TypeOf((*MockStorage)(nil).ReEncrypt))
}

// Save mocks base method.
func (m *MockStorage) Save() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockStorageMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStorage)(nil).Save))
}
