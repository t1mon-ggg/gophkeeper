// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/client/remote/remote.go

// Package mock_remote is a generated GoMock package.
package mock_remote

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/t1mon-ggg/gophkeeper/pkg/models"
)

// MockActions is a mock of Actions interface.
type MockActions struct {
	ctrl     *gomock.Controller
	recorder *MockActionsMockRecorder
}

// MockActionsMockRecorder is the mock recorder for MockActions.
type MockActionsMockRecorder struct {
	mock *MockActions
}

// NewMockActions creates a new mock instance.
func NewMockActions(ctrl *gomock.Controller) *MockActions {
	mock := &MockActions{ctrl: ctrl}
	mock.recorder = &MockActionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActions) EXPECT() *MockActionsMockRecorder {
	return m.recorder
}

// AddPGP mocks base method.
func (m *MockActions) AddPGP(publickey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPGP", publickey)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPGP indicates an expected call of AddPGP.
func (mr *MockActionsMockRecorder) AddPGP(publickey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPGP", reflect.TypeOf((*MockActions)(nil).AddPGP), publickey)
}

// Close mocks base method.
func (m *MockActions) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockActionsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockActions)(nil).Close))
}

// ConfirmPGP mocks base method.
func (m *MockActions) ConfirmPGP(publickey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmPGP", publickey)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmPGP indicates an expected call of ConfirmPGP.
func (mr *MockActionsMockRecorder) ConfirmPGP(publickey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmPGP", reflect.TypeOf((*MockActions)(nil).ConfirmPGP), publickey)
}

// Delete mocks base method.
func (m *MockActions) Delete() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockActionsMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockActions)(nil).Delete))
}

// GetLogs mocks base method.
func (m *MockActions) GetLogs() ([]models.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs")
	ret0, _ := ret[0].([]models.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockActionsMockRecorder) GetLogs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockActions)(nil).GetLogs))
}

// ListPGP mocks base method.
func (m *MockActions) ListPGP() ([]models.PGP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPGP")
	ret0, _ := ret[0].([]models.PGP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPGP indicates an expected call of ListPGP.
func (mr *MockActionsMockRecorder) ListPGP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPGP", reflect.TypeOf((*MockActions)(nil).ListPGP))
}

// Login mocks base method.
func (m *MockActions) Login(username, password, public string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", username, password, public)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockActionsMockRecorder) Login(username, password, public interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockActions)(nil).Login), username, password, public)
}

// NewStream mocks base method.
func (m *MockActions) NewStream() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStream")
	ret0, _ := ret[0].(error)
	return ret0
}

// NewStream indicates an expected call of NewStream.
func (mr *MockActionsMockRecorder) NewStream() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStream", reflect.TypeOf((*MockActions)(nil).NewStream))
}

// Pull mocks base method.
func (m *MockActions) Pull(checksum string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull", checksum)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pull indicates an expected call of Pull.
func (mr *MockActionsMockRecorder) Pull(checksum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockActions)(nil).Pull), checksum)
}

// Push mocks base method.
func (m *MockActions) Push(payload, hashsum string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", payload, hashsum)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockActionsMockRecorder) Push(payload, hashsum interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockActions)(nil).Push), payload, hashsum)
}

// Register mocks base method.
func (m *MockActions) Register(username, password, public string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", username, password, public)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockActionsMockRecorder) Register(username, password, public interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockActions)(nil).Register), username, password, public)
}

// RevokePGP mocks base method.
func (m *MockActions) RevokePGP(publickey string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokePGP", publickey)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokePGP indicates an expected call of RevokePGP.
func (mr *MockActionsMockRecorder) RevokePGP(publickey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokePGP", reflect.TypeOf((*MockActions)(nil).RevokePGP), publickey)
}

// Versions mocks base method.
func (m *MockActions) Versions() ([]models.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Versions")
	ret0, _ := ret[0].([]models.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Versions indicates an expected call of Versions.
func (mr *MockActionsMockRecorder) Versions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Versions", reflect.TypeOf((*MockActions)(nil).Versions))
}
