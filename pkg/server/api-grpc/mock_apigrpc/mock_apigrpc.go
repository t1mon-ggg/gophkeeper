// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/server/api-grpc/api-grpc.go

// Package mock_apigrpc is a generated GoMock package.
package mock_apigrpc

import (
	reflect "reflect"
	sync "sync"

	gomock "github.com/golang/mock/gomock"
)

// MockAPIandGRPC is a mock of APIandGRPC interface.
type MockAPIandGRPC struct {
	ctrl     *gomock.Controller
	recorder *MockAPIandGRPCMockRecorder
}

// MockAPIandGRPCMockRecorder is the mock recorder for MockAPIandGRPC.
type MockAPIandGRPCMockRecorder struct {
	mock *MockAPIandGRPC
}

// NewMockAPIandGRPC creates a new mock instance.
func NewMockAPIandGRPC(ctrl *gomock.Controller) *MockAPIandGRPC {
	mock := &MockAPIandGRPC{ctrl: ctrl}
	mock.recorder = &MockAPIandGRPCMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIandGRPC) EXPECT() *MockAPIandGRPCMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockAPIandGRPC) Start(wg *sync.WaitGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", wg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockAPIandGRPCMockRecorder) Start(wg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockAPIandGRPC)(nil).Start), wg)
}

// Stop mocks base method.
func (m *MockAPIandGRPC) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockAPIandGRPCMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockAPIandGRPC)(nil).Stop))
}
