package static

import (
	"net/http"

	"github.com/labstack/echo/v4"
)

const (
	greetings = `<h1 id="gophkeeper">gophkeeper</h1>
	<p><img src="gophkeeper.png" alt="gophkeeper"  width="700" height="369" align="middle"></p>
	<h2 id="-">Общие требования</h2>
	<p>GophKeeper представляет собой клиент-серверную систему, позволяющую пользователю надёжно и безопасно хранить логины, пароли, бинарные данные и прочую приватную информацию.</p>
	<h2 id="-">Сервер должен реализовывать следующую бизнес-логику:</h2>
	<blockquote>
	<p>регистрация, аутентификация и авторизация пользователей;<br>хранение приватных данных;<br>синхронизация данных между несколькими авторизованными клиентами одного владельца;<br>передача приватных данных владельцу по запросу.   </p>
	</blockquote>
	<h2 id="-">Клиент должен реализовывать следующую бизнес-логику:</h2>
	<blockquote>
	<p>аутентификация и авторизация пользователей на удалённом сервере;<br>доступ к приватным данным по запросу.   </p>
	</blockquote>
	<h2 id="-">Функции, реализация которых остаётся на усмотрение исполнителя:</h2>
	<blockquote>
	<p>создание, редактирование и удаление данных на стороне сервера или клиента;
	формат регистрации нового пользователя;
	выбор хранилища и формат хранения данных;
	обеспечение безопасности передачи и хранения данных;
	протокол взаимодействия клиента и сервера;
	механизмы аутентификации пользователя и авторизации доступа к информации.</p>
	</blockquote>
	<h2 id="-">Дополнительные требования:</h2>
	<blockquote>
	<p>клиент должен распространяться в виде CLI-приложения с возможностью запуска на платформах Windows, Linux и Mac OS;<br>клиент должен давать пользователю возможность получить информацию о версии и дате сборки бинарного файла клиента.   </p>
	</blockquote>
	<h2 id="-">Типы хранимой информации</h2>
	<blockquote>
	<p>пары логин/пароль;
	произвольные текстовые данные;
	произвольные бинарные данные;
	данные банковских карт.</p>
	</blockquote>
	<p><em>Для любых данных должна быть возможность хранения произвольной текстовой метаинформации (принадлежность данных к веб-сайту, личности или банку, списки одноразовых кодов активации и прочее).</em>   </p>
	<h2 id="-">Абстрактная схема взаимодействия с системой</h2>
	<p>Ниже описаны базовые сценарии взаимодействия пользователя с системой. Они не являются исчерпывающими — решение отдельных сценариев (например, разрешение конфликтов данных на сервере) остаётся на усмотрение исполнителя.*</p>
	<h3 id="-">Для нового пользователя:</h3>
	<blockquote>
	<p>Пользователь получает клиент под необходимую ему платформу.
	Пользователь проходит процедуру первичной регистрации.
	Пользователь добавляет в клиент новые данные.
	Клиент синхронизирует данные с сервером.</p>
	</blockquote>
	<h3 id="-">Для существующего пользователя:</h3>
	<blockquote>
	<p>Пользователь получает клиент под необходимую ему платформу.
	Пользователь проходит процедуру аутентификации.
	Клиент синхронизирует данные с сервером.
	Пользователь запрашивает данные.
	Клиент отображает данные для пользователя.</p>
	</blockquote>
	<h2 id="-">Тестирование и документация</h2>
	<blockquote>
	<p>Код всей системы должен быть покрыт юнит-тестами не менее чем на 80%.<br>Каждая экспортированная функция, тип, переменная, а также пакет системы должны содержать исчерпывающую документацию.</p>
	</blockquote>
	<h2 id="-">Необязательные функции</h2>
	<p>Перечисленные ниже функции необязательны к имплементации, однако позволяют лучше оценить степень экспертизы исполнителя. Исполнитель может реализовать любое количество из представленных ниже функций на свой выбор:</p>
	<blockquote>
	<p>поддержка данных типа OTP (one time password);<br>
	поддержка терминального интерфейса (TUI — terminal user interface);<br>
	использование бинарного протокола;<br>
	наличие функциональных и/или интеграционных тестов;<br>
	описание протокола взаимодействия клиента и сервера в формате Swagger.</p>
	</blockquote>
`
)

var e *echo.Echo

// hello - handle for /
func hello(c echo.Context) error {
	c.Response().Header().Set(echo.HeaderContentType, echo.MIMETextHTMLCharsetUTF8)
	return c.String(http.StatusOK, greetings)
}

func ApplyStatic(echo *echo.Echo) *echo.Echo {
	e = echo
	e.File("/favicon.ico", "favicon.ico")
	e.File("/gophkeeper.png", "gophkeeper.png")
	e.GET("/", hello) // greetings web page
	return e
}
