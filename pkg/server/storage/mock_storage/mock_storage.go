// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/server/storage/interface.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	net "net"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	logging "github.com/t1mon-ggg/gophkeeper/pkg/logging"
	models "github.com/t1mon-ggg/gophkeeper/pkg/models"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddPGP mocks base method.
func (m *MockStorage) AddPGP(username, publickey string, confirm bool, ip *net.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPGP", username, publickey, confirm, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPGP indicates an expected call of AddPGP.
func (mr *MockStorageMockRecorder) AddPGP(username, publickey, confirm, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPGP", reflect.TypeOf((*MockStorage)(nil).AddPGP), username, publickey, confirm, ip)
}

// Close mocks base method.
func (m *MockStorage) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStorage)(nil).Close))
}

// ConfirmPGP mocks base method.
func (m *MockStorage) ConfirmPGP(username, publickey string, ip *net.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmPGP", username, publickey, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmPGP indicates an expected call of ConfirmPGP.
func (mr *MockStorageMockRecorder) ConfirmPGP(username, publickey, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmPGP", reflect.TypeOf((*MockStorage)(nil).ConfirmPGP), username, publickey, ip)
}

// DeleteUser mocks base method.
func (m *MockStorage) DeleteUser(username string, ip *net.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", username, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStorageMockRecorder) DeleteUser(username, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStorage)(nil).DeleteUser), username, ip)
}

// GetLog mocks base method.
func (m *MockStorage) GetLog(username string, ip *net.IP) ([]models.Action, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLog", username, ip)
	ret0, _ := ret[0].([]models.Action)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLog indicates an expected call of GetLog.
func (mr *MockStorageMockRecorder) GetLog(username, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLog", reflect.TypeOf((*MockStorage)(nil).GetLog), username, ip)
}

// ListPGP mocks base method.
func (m *MockStorage) ListPGP(username string, ip *net.IP) ([]models.PGP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPGP", username, ip)
	ret0, _ := ret[0].([]models.PGP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPGP indicates an expected call of ListPGP.
func (mr *MockStorageMockRecorder) ListPGP(username, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPGP", reflect.TypeOf((*MockStorage)(nil).ListPGP), username, ip)
}

// Ping mocks base method.
func (m *MockStorage) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStorageMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorage)(nil).Ping))
}

// Pull mocks base method.
func (m *MockStorage) Pull(username, checksum string, ip *net.IP) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pull", username, checksum, ip)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pull indicates an expected call of Pull.
func (mr *MockStorageMockRecorder) Pull(username, checksum, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pull", reflect.TypeOf((*MockStorage)(nil).Pull), username, checksum, ip)
}

// Push mocks base method.
func (m *MockStorage) Push(username, checksum, data string, ip *net.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Push", username, checksum, data, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// Push indicates an expected call of Push.
func (mr *MockStorageMockRecorder) Push(username, checksum, data, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockStorage)(nil).Push), username, checksum, data, ip)
}

// RevokePGP mocks base method.
func (m *MockStorage) RevokePGP(username, publickey string, ip *net.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokePGP", username, publickey, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokePGP indicates an expected call of RevokePGP.
func (mr *MockStorageMockRecorder) RevokePGP(username, publickey, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokePGP", reflect.TypeOf((*MockStorage)(nil).RevokePGP), username, publickey, ip)
}

// SaveLog mocks base method.
func (m *MockStorage) SaveLog(username, action, checksum string, ip *net.IP, date time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLog", username, action, checksum, ip, date)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLog indicates an expected call of SaveLog.
func (mr *MockStorageMockRecorder) SaveLog(username, action, checksum, ip, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLog", reflect.TypeOf((*MockStorage)(nil).SaveLog), username, action, checksum, ip, date)
}

// SignIn mocks base method.
func (m *MockStorage) SignIn(user models.User, ip *net.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", user, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignIn indicates an expected call of SignIn.
func (mr *MockStorageMockRecorder) SignIn(user, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockStorage)(nil).SignIn), user, ip)
}

// SignUp mocks base method.
func (m *MockStorage) SignUp(username, password string, ip *net.IP) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", username, password, ip)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockStorageMockRecorder) SignUp(username, password, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockStorage)(nil).SignUp), username, password, ip)
}

// Versions mocks base method.
func (m *MockStorage) Versions(username string, ip *net.IP) ([]models.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Versions", username, ip)
	ret0, _ := ret[0].([]models.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Versions indicates an expected call of Versions.
func (mr *MockStorageMockRecorder) Versions(username, ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Versions", reflect.TypeOf((*MockStorage)(nil).Versions), username, ip)
}

// log mocks base method.
func (m *MockStorage) log() logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "log")
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// log indicates an expected call of log.
func (mr *MockStorageMockRecorder) log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "log", reflect.TypeOf((*MockStorage)(nil).log))
}
